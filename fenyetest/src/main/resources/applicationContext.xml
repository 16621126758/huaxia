<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
  <context:component-scan base-package="cn.com.chnsys">
    <!--不要控制器-->
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>
  <!--这里主要配置和业务逻辑有关的-->
  <!--数据源事务控制==========================================================-->
  <!--引入外部的properties-->
  <context:property-placeholder location="classpath:config/jdbc.properties"/>
  <bean id="poolDataSource" class = "com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="jdbcUrl" value = "${jdbc.jdbcUrl}"/>
    <property name="driverClass" value="${jdbc.driverClass}"/>
    <property name="user" value="${jdbc.user}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>

  <!--&lt;!&ndash;start  ======================== =  配置和mybatis的整合  下面的可以帮我们创建sqlSessionFactory=========================== &ndash;&gt;-->
  <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!--&lt;!&ndash;指定mybatis全局配置文件位置&ndash;&gt;-->
    <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
    <!--<property name="dataSource" ref="poolDataSource"/>-->
    <!--&lt;!&ndash;指定mapper文件的位置&ndash;&gt;-->
    <!--<property name="mapperLocations" value="classpath:mapper/*.xml"/>-->

  <!--</bean>-->

  <!--&lt;!&ndash;配置扫描器，将mybatis接口实现加入到ioc容器中&ndash;&gt;-->
  <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--&lt;!&ndash;掃描所有dao接口的实现，加入到ioc容器中&ndash;&gt;-->
    <!--<property name="basePackage" value="cn.com.chnsys.dao"/>-->
  <!--</bean>-->
  <!--&lt;!&ndash;mybatis      ===========================end   &ndash;&gt;-->


  <!--配置一个可以批量执行的sqlSesion-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    <constructor-arg name="executorType" value="BATCH"/>
  </bean>

  <!--事务控制的配置-->
  <bean id = "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!--控制住数据源 开启关闭回滚操作用事务管理器操作-->
    <property name="dataSource" ref="poolDataSource"/>
  </bean>

  <!--开启基于注解的事务 也可以使用xml事务来写（必要主要的都使用配置式）-->
  <aop:config>
    <!--切入点表达式  service下的所有的方法都能切入-->
    <aop:pointcut id="txPoint" expression="execution(* cn.com.chnsys.service..*(..))"/>
    <!--配置事务增强-->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
  </aop:config>
  <!--配置事务增强，事务如何切入-->
  <tx:advice id = "txAdvice">
    <tx:attributes>
      <!--所有方法都是事务方法-->
      <tx:method name="*"/>
      <!--以get开始的所有方法 readonly 做一些优化-->
      <tx:method name="get*" read-only="true"/>
    </tx:attributes>
  </tx:advice>

  <!--spring配置文件的核心点  （数据源与mybatis的整合，事务控制）-->

</beans>